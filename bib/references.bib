@article{MdMostafizerRahman2020,
  abstract = {In recent years, millions of source codes are generated in different languages on a daily basis all over the world. A deep neural
network-based intelligent support model for source code completion would be a great advantage in software engineering and
programming education fields. Vast numbers of syntax, logical, and other critical errors that cannot be detected by normal compilers
continue to exist in source codes, and the development of an intelligent evaluation methodology that does not rely on manual
compilation has become essential. Even experienced programmers often find it necessary to analyze an entire program in order to find
a single error and are thus being forced to waste valuable time debugging their source codes. With this point in mind, we proposed an
intelligent model that is based on long short-term memory (LSTM) and combined it with an attention mechanism for source code
completion. ,us, the proposed model can detect source code errors with locations and then predict the correct words. In addition, the
proposed model can classify the source codes as to whether they are erroneous or not. We trained our proposed model using the source
code and then evaluated the performance. All of the data used in our experiments were extracted from Aizu Online Judge (AOJ)
system. ,e experimental results obtained show that the accuracy in terms of error detection and prediction of our proposed model
approximately is 62% and source code classification accuracy is approximately 96% which outperformed a standard LSTM and other
state-of-the-art models. Moreover, in comparison to state-of-the-art models, our proposed model achieved an interesting level of
success in terms of error detection, prediction, and classification when applied to long source code sequences. Overall, these ex perimental results indicate the usefulness of our proposed model in software engineering and programming education arena.},
  author = {Md. Mostafizer Rahman, Yutaka Watanobe,Keita Nakamura},
  doi = {10.1155/2020/7426461},
  journal = {Hindawi},
  keywords = { },
  number = {01},
  publisher = {Hindawi},
  volume = { },
  series = { },
  title = {A Neural Network Based Intelligent Support Model for Program Code Completion},
  url = {https://doi.org/10.1155/2020/7426461},
  year = {2020}
}
@article{Hazem2023,
  abstract = {The integration of Artificial Intelligence (AI) into the space of software engineering marks a transformative period
that reshapes traditional development processes and propels the industry into a new era of innovation. This exploration
delves into the multifaceted impact of AI, from its roots in early symbolic AI to the contemporary dominance of
machine learning and deep learning. AI’s applications span various domains, but its significance in software
engineering lies in its ability to enhance efficiency, improve software quality, and introduce novel approaches to
problem-solving. From automating routine tasks to streamlining complex development workflows, AI acts as a virtual
collaborator, allowing human developers to focus on higher-order thinking and creativity. This study introduces the
application of AI in software engineering. reverse-engineering, and development environments. Moreover, ethical
considerations, challenges, and future trends, including explainable AI, reinforcement learning, and human-AI
collaboration, are presented.}
  author = {Hazem W. Marar},
  doi = {10.24294/csma.v6i1.3906},
  journal = {Computer Software and Media Applications},
  keywords = {type:Artificial Intelligence , AI, software engineering, neural networks},
  number = {01},
  publisher = {Computer Software and Media Applications},
  volume = {6},
  series = { },
  title = {Advancements in software engineering using AI},
  url = {doi:10.24294/csma.v6i1.3906},
  year = {2023}
}
@article{Kory Becker2017,
  abstract = {In this paper, we present the first-of-its-kind machine learn ing (ML) system, called AI Programmer, that can automat ically generate full software programs requiring only mini mal human guidance. At its core, AI Programmer uses ge netic algorithms (GA) coupled with a tightly constrained programming language that minimizes the overhead of its ML search space. Part of AI Programmer’s novelty stems from (i) its unique system design, including an embedded,hand-crafted interpreter for efficiency and security and (ii)its augmentation of GAs to include instruction-gene ran domization bindings and programming language-specific genome construction and elimination techniques. We pro vide a detailed examination of AI Programmer’s system design, several examples detailing how the system works, and experimental data demonstrating its software generation capabilities and performance using only mainstream CPUs.}
  author = {Kory Becker, Justin Gottschlich},
  doi = {10.1145/3449726.3463125},
  journal = {ICSE},
  keywords = {type:Genetic algorithm, program synthesis, genetic programming, evolutionary computation, artificial intelli gence, machine learning, programming languages, code gen eration and optimization},
  number = {01},
  publisher = {ICSE},
  volume = { },
  series = { },
  title = {AI Programmer: Autonomously Creating Software Programs Using Genetic Algorithms},
  url = {https://doi.org/10.1145/3449726.3463125},
  year = {2017}
}
@article{Marco Barenkamp2020,
  abstract = {Although Artificial Intelligence (AI) has become a buzzword for self-organizing IT applications, its relevance to
software engineering has hardly been analyzed systematically. This study combines a systematic review of previous
research in the field and five qualitative interviews with software developers who use or want to use AI tools in
their daily work routines, to assess the status of development, future development potentials and equally the risks
of AI application to software engineering. The study classifies the insights in the software development life cycle.
The analysis results that major achievements and future potentials of AI are a) the automation of lengthy routine
jobs in software development and testing using algorithms, e.g. for debugging and documentation, b) the
structured analysis of big data pools to discover patterns and novel information clusters and c) the systematic
evaluation of these data in neural networks. AI thus contributes to speed up development processes, realize
development cost reductions and efficiency gains. AI to date depends on man-made structures and is mainly
reproductive, but the automation of software engineering routines entails a major advantage: Human developers
multiply their creative potential when using AI tools effectively.}
  author = {Marco Barenkamp, Jonas Rebstadt, Oliver Thomas},
  doi = {10.1186/s42467-020-00005-4},
  journal = {AI Perspectives},
  keywords = {type:Software engineering, AI, Artificial intelligence, ML, Machine learning, Deep learning, Pattern recognition,Neural networks},
  number = {01},
  publisher = {AI Perspectives},
  volume = {2},
  series = { },
  title = {Applications of AI in classical software engineering},
  url = {https://doi.org/10.1186/s42467-020-00005-4},
  year = {2020}
}
@article{Zubair2022,
  abstract = {Artificial Intelligence (AI) is making a significant impact in multiple areas like medical, military, industrial, domestic,
law, arts as AI is capable to perform several roles such as managing smart factories, driving autonomous vehicles,
creating accurate weather forecasts, detecting cancer and personal assistants, etc. Software testing is the process of
putting the software to test for some abnormal behaviour of the software. Software testing is a tedious, laborious and
most time-consuming process. Automation tools have been developed that help to automate some activities of the testing
process to enhance quality and timely delivery. Over time with the inclusion of continuous integration and continuous
delivery (CI/CD) pipeline, automation tools are becoming less effective. The testing community is turning to AI to fill the
gap as AI is able to check the code for bugs and errors without any human intervention and in a much faster way than
humans. In this study, we aim to recognize the impact of AI technologies on various software testing activities or facets
in the STLC. Further, the study aims to recognize and explain some of the biggest challenges software testers face while
applying AI to testing. The paper also proposes some key contributions of AI in the future to the domain of software
testing.}
  author = {Zubair Khaliq,  Sheikh Umar Farooq, Dawood Ashraf Khan},
  doi = {10.48550/arXiv.2201.05371},
  journal = {Arxiv},
  keywords = {type:Artificial Intelligence, Machine Learning, Deep Learning, Software Testing, Software Testing Activities},
  number = { },
  publisher = {Arxiv},
  volume = { },
  series = { },
  title = {Artificial Intelligence in Software Testing : Impact, Problems, Challenges and Prospect},
  url = {https://doi.org/10.48550/arXiv.2201.05371},
  year = {2022}
}
@article{Hongyu Zhang2018,
  abstract = {To implement a program functionality, developers can reuse previously written code snippets by searching through a large-scale
codebase. Over the years, many code search tools have been proposed to help developers. The existing approaches often treat source
code as textual documents and utilize information retrieval models
to retrieve relevant code snippets that match a given query. These
approaches mainly rely on the textual similarity between source
code and natural language query. They lack a deep understanding
of the semantics of queries and source code.
In this paper, we propose a novel deep neural network named
CODEnn (Code-Description Embedding Neural Network). Instead
of matching text similarity, CODEnn jointly embeds code snippets
and natural language descriptions into a high-dimensional vector space, in such a way that code snippet and its corresponding
description have similar vectors. Using the unified vector representation, code snippets related to a natural language query can
be retrieved according to their vectors. Semantically related words
can also be recognized and irrelevant/noisy keywords in queries
can be handled.
As a proof-of-concept application, we implement a code search
tool named DeepCS using the proposed CODEnn model. We empirically evaluate DeepCS on a large scale codebase collected from
GitHub. The experimental results show that our approach can effectively retrieve relevant code snippets and outperforms previous
techniques.}
  author = {Hongyu Zhang,  Xiaodong Gu, Sunghun Kim},
  doi = {10.1145/3180155.3180167},
  journal = {ICSE},
  keywords = {type:code search, deep learning, joint embedding},
  number = {01},
  publisher = {ICSE},
  volume = { },
  series = { },
  title = {Deep code search},
  url = {https://doi.org/10.1145/3180155.3180167},
  year = {2018}
}
@article{SILVERIO2022,
  abstract = {AI-based systems are software systems with functionalities enabled by at least one AI component (e.g., for image-, speech-recognition, and autonomous driving). AI-based systems are becoming pervasive in society
due to advances in AI. However, there is limited synthesized knowledge on Software Engineering (SE) approaches for building, operating, and maintaining AI-based systems. To collect and analyze state-of-the art knowledge about SE for AI-based systems, we conducted a systematic mapping study. We considered 248 studies published between January 2010 and March 2020. SE for AI-based systems is an emerging research area, where more than 2/3 of the studies have been published since 2018. The most studied properties of
AI-based systems are dependability and safety. We identified multiple SE approaches for AI-based systems, which we classified according to the SWEBOK areas. Studies related to software testing and software quality
are very prevalent, while areas like software maintenance seem neglected. Data-related issues are the most recurrent challenges. Our results are valuable for: researchers, to quickly understand the state-of-the-art and learn which topics need more research; practitioners, to learn about the approaches and challenges that SE entails for AI-based systems; and, educators, to bridge the gap among SE and AI in their curricula.}
  author = {Martínez-Fernández,  JUSTUS BOGNER, XAVIER FRANCH, MARC ORIOL,JULIEN SIEBERT, ANNA MARIA VOLLMER,STEFAN WAGNER},
  doi = {10.1145/3487043},
  journal = {ACM},
  keywords = {type:Software engineering, artificial intelligence, AI-based systems, systematic mapping study},
  number = {37},
  publisher = {ACM},
  volume = {31},
  series = { },
  title = {Software Engineering for AI-Based Systems: A Survey},
  url = {ttps://doi.org/10.1145/3487043},
  year = {2022}
}
@article{Mahesh2020,
  abstract = {Recent advancements in technology have emerged the requirements of hardware and software applications. Along with this technical growth, software industries also have faced drastic growth in the demand of software for several applications. For any software industry, developing good quality software and maintaining its eminence for user end is considered as most important task for software industrial growth. In order to achieve this, software engineering plays an important role for software industries. Software applications are developed with the help of computer programming where codes are written for desired task. Generally, these codes contain some faulty instances which may lead to the buggy software development cause due to software defects. In the field of
software engineering, software defect prediction is considered as most important task which can be used for maintaining the quality of software. Defect prediction results provide the list of defect-prone source code artefacts so that quality assurance team scan effectively allocate limited resources for validating software products by putting more effort on the defect-prone source code. As the size of software projects becomes larger, defect prediction techniques will play an important role to support developers as well as to speed up time to market with more reliable software products. One of the most exhaustive and pricey part of embedded software development is consider as the process
of finding and fixing the defects. Due to complex infrastructure, magnitude, cost and time limitations, monitoring and fulfilling the quality is a big challenge, especially in automotive embedded systems. However, meeting the superior product quality and reliability is mandatory. Hence, higher importance is given to V&V (Verification & Validation). Software testing is an integral part of software V&V, which is focused on promising accurate functionality and long-term reliability of software systems. Simultaneously, software testing requires much effort, cost, infrastructure and expertise as the development. The costs and efforts elevate in safety critical software systems. Therefore, it is essential to have a good testing strategy for any industry with high software development costs. In this work, we are planning to develop an efficient approach for software defect prediction by using soft computing based machine learning techniques which helps to predict optimize the features and efficiently learn the features.}
  author = {Mahesh Kumar Thota,  Francis H Shajin,  P. Rajesh},
  doi = {10.6703/IJASE.202012_17(4).331},
  journal = {International Journal of Applied Science and Engineering},
  keywords = {type: Defect prediction, Soft computing, Verification, Validation},
  number = {37},
  publisher = {International Journal of Applied Science and Engineering},
  volume = {17},
  series = {4},
  title = {Survey on software defect prediction techniques},
  url = {https://doi.org/10.6703/IJASE.202012_17(4).331},
  year = {2020}
}
@article{Varun Shah2019,
  abstract = {In the rapidly evolving landscape of software engineering, the integration of artificial intelligence (AI) and machine learning (ML) technologies presents both opportunities and challenges. This paper explores the best practices and challenges associated with leveraging AI and ML in software engineering processes. We discuss the importance of efficient software engineering practices in the era of AI and ML, highlighting key considerations such as data
management, algorithm selection, model deployment, and ethical considerations. By addressing these challenges and adopting best practices, software engineers can harness the power of AI and ML to develop robust and scalable software solutions that meet the evolving needs of modern organizations.},
  author = {Varun Shah},
  doi = {10.13140/RG.2.2.36815.66722},
  journal = {IJCST},
  keywords = {type: Software Engineering, Artificial Intelligence, Machine Learning, Best Practices, Challenges},
  number = {03},
  publisher = {IJCST},
  volume = {3},
  series = { },
  title = {Towards Efficient Software Engineering in the Era of AI and ML: Best Practices and Challenges},
  url = {https://doi.org/10.13140/RG.2.2.36815.66722},
  year = {2019}
}
@article{Robert Feldt2018,
  abstract = {As Artificial Intelligence (AI) techniques have become more power ful and easier to use they are increasingly deployed as key compo nents of modern software systems. While this enables new function ality and often allows better adaptation to user needs it also creates additional problems for software engineers and exposes compa nies to new risks. Some work has been done to better understand the interaction between Software Engineering and AI but we lack methods to classify ways of applying AI in software systems and to analyse and understand the risks this poses. Only by doing so can we devise tools and solutions to help mitigate them. This paper presents the AI in SE Application Levels (AI-SEAL) taxonomy that categorises applications according to their point of AI application, the type of AI technology used and the automation level allowed. We show the usefulness of this taxonomy by classifying 15 papers
from previous editions of the RAISE workshop. Results show that the taxonomy allows classification of distinct AI applications and provides insights concerning the risks associated with them. We argue that this will be important for companies in deciding how to apply AI in their software applications and to create strategies for its use. }
  author = {Robert Feldt,Francisco G. de Oliveira Neto,Richard Torkar},
  doi = {10.1145/3194104.3194109},
  journal = {ICSE},
  keywords = {type: Taxonomy, Software Engineering, Artificial Intelligence},
  number = { },
  publisher = {ICSE},
  volume = { },
  series = { },
  title = {Ways of Applying Artificial Intelligence in Software Engineering},
  url = {https://doi.org/10.1145/3194104.3194109},
  year = {2019}
}